Pymagra.PyMaGra
===============

.. py:module:: Pymagra.PyMaGra

.. autoapi-nested-parse::

   last modified on Sep 06, 2024

   @author: Hermann Zeyen <hermann.zeyen@universite-paris-saclay.fr>
            University Paris-Saclay, France

   Needed Python packages:
       PyQt5
       matplotlib
       numpy
       os
       sys
       signal
       sklearn
       scipy

   Needed private files:

       Geometrics.py
       Magnetics.ui


   Contains the following class:
       Main : Main class, controlling inputs, data treatment and outputs



Classes
-------

.. autoapisummary::

   Pymagra.PyMaGra.Main


Module Contents
---------------

.. py:class:: Main(dir0=None)

   Bases: :py:obj:`PyQt5.QtWidgets.QWidget`


   Main class for PyMaGra Program

   :param dir0: name of working folder
   :type dir0: str (default = None)

   .. method:: __init__ : Initialization

   .. method:: readdata : Input data sets

   .. method:: check_data : Check if magnetic data contain errors (mainly nulls)

   .. method:: file_change : plot another already opened data file

   .. method:: join_daa : Join all available data sets into one common set.

   .. method:: getGeography : Get geography information (towns, geological borders...)

   .. method:: oneOfTwo : Extract one line out of two (for lines in alternating directions)

   .. method:: readBaseData : Input base station data

   .. method:: writeStn : Write treated data in Geometrics .stn format

   .. method:: writeDat : Write treated data in Geometrics Surfer format

   .. method:: saveBaseData : Write base station data into Geometrics .str file

   .. method:: original : Reset actual data to the original ones

   .. method:: plotOriginal : Plot original data set (but keep treated data as actual ones)

   .. method:: plotActual : Plot actual, treated data to screen

   .. method:: plot_gradient : Toggle on/off plotting of gradient data if there are

   .. method:: plot_geography : Toggle on/off plotting of geography data

   .. method:: plot_lineaments : Toggle on/off plotting of measured lineaments

   .. method:: plot_Line : Plot a lineament onto the data map

   .. method:: get_mouse_click (with method onClick); Wait for mouse click return position and type

   .. method:: setHelp : Set help text written at the base of the screen

   .. method:: changeColorScale : Change parameters for Color scale

   .. method:: plotBase : Plot base station data

   .. method:: plotMedian : Plot medians of all lines

   .. method:: zooming : (TODO)

   .. method:: zoomOut : (TODO)

   .. method:: zoomIn : (TODO)

   .. method:: zoomInitial : (TODO)

   .. method:: savePlot : Save actual plot into .png file

   .. method:: diurnal : Estimate diurnal variations from variation of line medians

   .. method:: clean : Eliminate outliers from data

   .. method:: justify_median : Justify medians of lines measured in opposite directions

   .. method:: justify_gauss : Justify gaussian distribution of lines in opposite directions

   .. method:: interpol : Interpolate data onto a regular grid

   .. method:: nanFill : Interpolate data at positions have nan-value

   .. method:: reducePole : Reduce magnetic data to the pole

   .. method:: log_spect : Calculate lograrithmic spectrum of a data series

   .. method:: fit2lines : Fit two slopes to a data series

   .. method:: min_max : Search all local minima and maxima in a vector

   .. method:: spector_line : Fit lines to lograithmic spectrum and calculate source depth

   .. method:: spector : Calculate 1D source depths from data spectrum

   .. method:: spector2D : Calculate 1D source depths from data spectrum on a 2D grid

   .. method:: tilt : Calculate tilt angle of 2D data set

   .. method:: continuation : Continue potential field data set upwards

   .. method:: analyticSignal : Calculate analytic signal and source depths

   .. method:: followLine : Follow the cursor and plot a straight line

   .. method:: eventFilter : (TODO) Event filter for keyboard strokes

   .. method:: Handler : Should handle exeptions - not really working

   .. method:: save_lineaments : Saves measured data lineaments into file

   .. method:: closeApp : Close application in an ordered way




   .. py:attribute:: function
      :value: 'main'



   .. py:attribute:: data_read
      :value: False



   .. py:attribute:: base_files
      :value: []



   .. py:attribute:: dat
      :value: []



   .. py:attribute:: dat_ori
      :value: []



   .. py:attribute:: data_files
      :value: []



   .. py:attribute:: file_types
      :value: []



   .. py:attribute:: data_types
      :value: []



   .. py:attribute:: percent
      :value: 0.01



   .. py:attribute:: mincol1
      :value: 0.0



   .. py:attribute:: maxcol1
      :value: 0.0



   .. py:attribute:: mincol2
      :value: 0.0



   .. py:attribute:: maxcol2
      :value: 0.0



   .. py:attribute:: mincolg
      :value: 0.0



   .. py:attribute:: maxcolg
      :value: 0.0



   .. py:attribute:: d_sensor
      :value: 0.9



   .. py:attribute:: h_sensor
      :value: 0.4



   .. py:attribute:: height
      :value: 1.3



   .. py:attribute:: gradient_flag
      :value: True



   .. py:attribute:: inter_flag
      :value: False



   .. py:attribute:: n_blocks
      :value: 0



   .. py:attribute:: grid_flag
      :value: True



   .. py:attribute:: nlineaments
      :value: 0



   .. py:attribute:: color
      :value: 'rainbow'



   .. py:attribute:: lineaments


   .. py:attribute:: treatments


   .. py:attribute:: u


   .. py:attribute:: line_choice
      :value: 'all'



   .. py:attribute:: dir0


   .. py:attribute:: fig_base
      :value: None



   .. py:attribute:: inclination
      :value: 62.0



   .. py:attribute:: declination
      :value: 0.0



   .. py:attribute:: field_flag
      :value: False



   .. py:attribute:: geography


   .. py:attribute:: base
      :value: None



   .. py:attribute:: fig_line
      :value: None



   .. py:attribute:: ax_line
      :value: None



   .. py:attribute:: ax_base
      :value: None



   .. py:attribute:: fig_median
      :value: None



   .. py:attribute:: ax_median
      :value: None



   .. py:attribute:: histo
      :value: None



   .. py:attribute:: ax_histo
      :value: None



   .. py:attribute:: fig_spector
      :value: None



   .. py:attribute:: ax_spector
      :value: None



   .. py:attribute:: fig_FFT
      :value: None



   .. py:attribute:: ax_FFT
      :value: None



   .. py:attribute:: fig_spect2
      :value: None



   .. py:attribute:: ax_spect2
      :value: None



   .. py:attribute:: fig_FFT2
      :value: None



   .. py:attribute:: ax_FFT2
      :value: None



   .. py:attribute:: fig_grad
      :value: None



   .. py:attribute:: ax_grad
      :value: None



   .. py:attribute:: fig_tilt
      :value: None



   .. py:attribute:: ax_tilt
      :value: None



   .. py:attribute:: fig_ana
      :value: None



   .. py:attribute:: ax_ana
      :value: None



   .. py:attribute:: fig_q
      :value: None



   .. py:attribute:: ax_q
      :value: None



   .. py:attribute:: fig_sig
      :value: None



   .. py:attribute:: ax_sig
      :value: None



   .. py:attribute:: wait
      :value: True



   .. py:attribute:: click
      :value: False



   .. py:attribute:: press
      :value: False



   .. py:attribute:: event
      :value: None



   .. py:attribute:: x_event
      :value: None



   .. py:attribute:: y_event
      :value: None



   .. py:attribute:: coor_x
      :value: 0.0



   .. py:attribute:: coor_y
      :value: 0.0



   .. py:attribute:: line
      :value: None



   .. py:attribute:: released
      :value: False



   .. py:attribute:: line_click
      :value: None



   .. py:attribute:: x_mouse
      :value: 0.0



   .. py:attribute:: y_mouse
      :value: 0.0



   .. py:attribute:: mouse
      :value: None



   .. py:attribute:: xmin
      :value: 0.0



   .. py:attribute:: ymin
      :value: 0.0



   .. py:attribute:: xwin
      :value: 0.0



   .. py:attribute:: ywin
      :value: 0.0



   .. py:attribute:: day_joint_flag
      :value: False



   .. py:attribute:: diff_weight
      :value: 1.0



   .. py:attribute:: dx
      :value: 0.0



   .. py:attribute:: dy
      :value: 0.0



   .. py:attribute:: dz
      :value: 0.0



   .. py:attribute:: sensor1_inter
      :value: []



   .. py:attribute:: sensor2_inter
      :value: []



   .. py:attribute:: grad_inter
      :value: []



   .. py:attribute:: x_inter
      :value: []



   .. py:attribute:: y_inter
      :value: []



   .. py:attribute:: z_inter
      :value: []



   .. py:attribute:: sensor1_fill
      :value: []



   .. py:attribute:: sensor2_fill
      :value: []



   .. py:attribute:: grad_fill
      :value: []



   .. py:attribute:: mask1
      :value: []



   .. py:attribute:: mask2
      :value: []



   .. py:attribute:: start
      :value: [0.0, 0.0]



   .. py:attribute:: side
      :value: 0



   .. py:attribute:: background
      :value: None



   .. py:attribute:: canvas
      :value: None



   .. py:attribute:: axl
      :value: None



   .. py:attribute:: cidmotion
      :value: None



   .. py:attribute:: cidrelease
      :value: None



   .. py:attribute:: cidpress
      :value: None



   .. py:attribute:: string_keys
      :value: 0



   .. py:attribute:: w


   .. py:attribute:: actual_plotted_file
      :value: 0



   .. py:attribute:: x


   .. py:attribute:: y


   .. py:attribute:: help


   .. py:attribute:: grad_flag
      :value: False



   .. py:method:: readData(dir0)

      Reads additional data files to the ones read during init of Geometrics
      normally, Geometrics stn files should be read, but another format is
      also possible, considered to be output of program mgwin.
      See Geometrics.read_txt for more information

      :rtype: None.



   .. py:method:: check_data(data, file)

      Check magnetic data for consitency

      Data acquired with PPM or Cs/Rb magnetometers may have null measurements
      if the sensors are placed parallel or perpendicular to the Earth's
      field. Program checks whether the minimum or maximum values in a data
      set are smaller/larger than the median by more than 20000 nT and if so,
      it gives a warning message proposing to clean up the data using
      Utilities -> Clean data before any other treatment.

      :param data: Contains all data of a data set. entries "s1", "s2" and "grad_data"
                   are used
      :type data: dictionary
      :param file: File name of the data set (only used in the warning message).
      :type file: str

      :rtype: None.



   .. py:method:: file_change()

      Choose another file to be represented and treated.

      Dialogue box presents a list of available files other than the one
      actually on the screen and allows to choose by clicking a radio button.
      Clicking on Cancel keeps the actual data.

      :rtype: None.



   .. py:method:: join_data()

      Joins al available data sets into one common data set

      All data must have the same data type (magnetic vs gravity) and be
      located in the same coordinate system. If the different data blocks are
      not contiguous in space, program will interpolate meaningless "data".

      The original data sets are maintained such that using file_change, one
      may return to one of the smaller data sets. If later a new data set is
      added and data are joint again, the joint data set is excluded.

      :rtype: None.



   .. py:method:: getGeography()

      Ask for file containing geography data, read data and plot them onto
      data map.

      Geography file has the following form:

      #Keyword (may be "#LINE", "#POINT" or "#END")
      If "#POINT", one line follows with x y text         If "#LINE", one line follows for every point defining the line x y

      The file must be finished with a line containing #END in the first
      four columns.
      Usually, points are towns and text the name of the town
      x and y must be given in the same coordinate system as the data.

      :rtype: None.



   .. py:method:: oneOfTwo()

      Extract every second line starting with line 1 (odd lines) or line 2 (even lines)
      May be useful is there is a strong directional effect in magnetic data

      :rtype: None.



   .. py:method:: readBaseData()

      Read base station data. These data must be Geometrics PPM files

      :rtype: None.



   .. py:method:: getDateString()

      Gets date and time of execution of the function

      :returns: * **date and time** (*str*) -- Date and time are stored as YYYY-MM-DD_hh-mm-ss
                * *Is used to define output names where the text is standard but time of*
                * *creation allows distinguishing.*



   .. py:method:: writeStn()

      Writes actual (last treated interpolated data) to Geometrics stn file.
      The file name is "data-type"followed by date and hour of file production

      :rtype: None.



   .. py:method:: writeDat()

      Writes actual (last treated not necessarily interpolated data) to
      Geometrics Surfer (.dat) format file.
      The file name is "data-type"followed by date and hour of file production

      :rtype: None.



   .. py:method:: saveBaseData()

      Writes base station data to Geometrics G-856 .stn format file.
      The file name is "base"followed by date and hour of file production

      :rtype: None.



   .. py:method:: original()

      Recovers original (not interpolated) data to restart data treatment
      procedure.
      If not base station data had been read, but they were produced through
      spline fit of median values, those data are deleted.

      :rtype: None.



   .. py:method:: plotOriginal()

      Plot original data set again

      :rtype: None.



   .. py:method:: plotActual(data=None)

      Plot actual data set modified and interpolated or not

      :rtype: None.



   .. py:method:: plot_gradient()

      Activate or desactivate plot of vertical gradient maps

      :rtype: None.



   .. py:method:: plot_geography()

      Activate or deactivate plot of geographical information

      :rtype: None.



   .. py:method:: plot_lineaments()

      Activate or deactivate plot of measured lineaments

      :rtype: None.



   .. py:method:: plot_grid()

      Activate or deactivate plot of grid

      :rtype: None.



   .. py:method:: plot_Line()

      Plot one line out of the data set.
      The user is first asked to choose one line by mouse click. This line
      is shown in a floating window.
      Erroneous data may be erased by clicking the mouse wheel at the beginning
      and at the end of the zone to be erased. The program recognizes
      automatically whether first or second sensor has been clicked.
      Left mouse click changes line to the left/below, right mouse click goes
      to the line to the right/above.
      A click outside the two coordinate systems stops the module and deletes
      the flowting window.

      :rtype: None.



   .. py:method:: get_mouse_click(fig)

      wait for a mous click within figure "fig".

      :param fig: for main window, it must be self.w.mplvl
                  for floating window, it is the name that has been given to the
                  window at creation time
      :type fig: matplotlib figure

      :returns: * *None.*
                * *Mouse position, button pressed and the general event parameters are*
                * *accessible through self.x_mouse, self.y_mouse, self.mouse and self.event*



   .. py:method:: setHelp(text, fig)

      Set help text at bottom of screen.

      :param text: Text to be printed (defined in __init__)
                   Text is written in QLabel widget. In order to keep the widget at the
                   bottom of the screen, the existing one is first erased and then reopened.
                   This call has to be done after any modification of the graphics window.
      :type text: str
      :param fig:
      :type fig: Matplotlib Figure
      :param Figure where to write the help text.:

      :rtype: None



   .. py:method:: changeColorScale()

      Change the limiting quantiles for creating of color scales.

      The values below self.percent and above (1-self.percent) are clipped

      :rtype: None.



   .. py:method:: plotBase()

      Plot base station data as function of time (seconds in year).
      The user may erase erroneous data by clicking the mouse wheel at the
      beginning and at the end of the zone to be erased.
      A click with any other mouse button finishes the module and closes the
      floating window.

      :rtype: None.



   .. py:method:: plotMedian()

      Plot medians of every measured line (from non-interpolated data). Odd
      lines and even lines are plotted with different colours. Also sensor1
      and sensor 2 data are plotted in to the same axis and distinuished by
      different colors.




   .. py:method:: savePlot()

      Function saves plot inside actual window into a png file
      The file name is prefix_date_time.png
      Prefix depends on the actual image type.

      :rtype: None.



   .. py:method:: diurnal()

      If no base station data have been read create diurnal variation
      by adjusting a spline of degree deg to the median values as function
      of time.




   .. py:method:: clean()

      Delete erroneous data
      Opions are
      * giving fixed upper and/or lower bounds (in or mGal)
      * eliminating all data below and/or above a certain quantile
      * choose limits by mouse click an a histogram (same value for both
      sensors). First click: cut below, second: cut above. a click outside
      an axis means not clipping in this direction.
      Data outside the chosen zone are set to Nan.

      :rtype: None.



   .. py:method:: justify_median()

      Adjust medians of every second line to the average of the medians of
      the neighboring lines in order to attenuate the directional effects
      of measurements.
      The lines to be modified may be the even ones or the odd ones (does not
      always give the same result). Medians of lines at the edges are set to
      the same value as the neighboring line.




   .. py:method:: justify_gauss()

      see Masoudi et al., J. Geophys. Eng., 2023

      :rtype: None.



   .. py:method:: interpol()

      Interpolate data within the measurement lines onto a regular grid.
      No data are extrapolated, i.e. if a line starts later or finishes earlier
      than a regular grid, missing grid points are set to nan

      :rtype: None.



   .. py:method:: nanFill()

      Fill nan values by interpolation of data in the direction perpendicular
      to the measurement direction (it is supposed that if a line is not
      complete, nearby ones will be). Extrapolation will be done (one wants
      to create a complete grid) and different possibilities exist (mainly
      spline or constant). Spline is often very risky.

      :rtype: None.



   .. py:method:: reducePole()

      Pole reduction is done, only for the external field, eventual remanent
      magnetization is not taken into account.

      :rtype: None.



   .. py:method:: log_spect(data, d, n_coef)

      Calculate logarithmic power spectrum of a series of data

      :param data: Data to be analyzed.
      :type data: numpy 1D array, float
      :param d: Distance between data points (sampling distance).
      :type d: float
      :param n_coef: Number of coefficients of the spectrum to be returned.
      :type n_coef: int

      :returns: * *numpy 1D array* -- logarithm of normalized power spectrum.
                * *list* -- Wavenumbers of power spectrum.



   .. py:method:: fit2lines(x, y, n0, n1, n2, n0_flag)

      Fit two regression lines to a data set.
      Find the point where a break in slope gives the best fit between the
      n1th point and the n2th point

      :param x: x-coordinates of the data series.
      :type x: numpy 1D array, float
      :param y: y-coordinates of the data series.
      :type y: numpy 1D array, float
      :param n0: first point of the series to be considered.
      :type n0: int
      :param n1: First point in series considered for possible slope break.
      :type n1: int
      :param n2: Last point in series considered for possible slope break.
      :type n2: int
      :param n0_flag: if True : first line must pass through point n0
      :type n0_flag: bool

      :returns: * *regression coefficients for first slope*
                * *regression coefficients for second slope*
                * **int** (*position of slope beak*)
                * **float** (*misfit*)



   .. py:method:: min_max(data, half_width=3)

      Find all relative minima and maxima in a data vector.

      A maximum is found if a value at position i of the vector is larger
      than or equal to all other values in a range [i-half_width:i+half_with]
      and at the same time strictly larger than all values of one side.
      Sometimes, e.g. if seismograms are saturated, a slope exists on one side,
      but the values are constant on the other side. The one-sided test is to
      avoid that a flat curve with 2*half_width constant values is also
      considered as local maximum. Equivalent scheme for definition of a minimum.
      In addition, the function reduces possible local maxima and minima such that
      a maximum is always followed by a minimum and vice versa. If several local
      maxima follow each other (i.e. no wide enough local minimum exists between
      them), the program searches the strongest one of the subsequent maxima or, if
      several equal maximum values exist, it takes as position of the maximum the
      center point between those multiple maxima (again for saturated curves).

      :param data: Data vrctor to be analysed
      :type data: 1D numpy float array
      :param half_width: Number of samples analyzed to all ides of every data sample.
      :type half_width: int, optional (default: 3)

      :returns: * **max_pos** (*1D numpy int array*) -- All position numbers where there is a relative maximum in vector "data".
                * **max_val** (*1D numpy float array*) -- Values at these positions
                * **min_pos** (*1D numpy int array*) -- All position numbers where there is a relative minimum in vector "data"
                * **min_val** (*1D numpy float array*) -- Values at these positions



   .. py:method:: min_max2D(data, half_width=3)

      Find all relative minima and maxima in a 2D data matrix.

      A maximum is found if a value at position i of the vector is larger
      than or equal to all other values in a range [i-half_width:i+half_with]
      in both directions independently and at the same time strictly larger
      than all values of one side.

      The function searches first all relative extrema alng every column, then
      along every row. The returned positions are the combination of points
      found in both directions. In this way ridges parallel to the x axis
      and parallel to the y axes are detected.

      :param data: Data matrix to be analysed
      :type data: 2D numpy float array
      :param half_width: Number of samples analyzed to all ides of every data sample.
      :type half_width: int, optional (default: 3)

      :returns: * **maxima** (*List of two 1D numpy int arrays*) -- All position numbers where there is a relative maximum in array "data".
                  maxima[0]: vector of row numbers, maxima[1]: vector of column numberss
                * **minima** (*List of two 1D numpy int arrays*) -- All position numbers where there is a relative minimum in array "data"
                  minima[0]: vector of row numbers, minima[1]: vector of column numbers



   .. py:method:: zero_xing2D(data)

      Search zero crossings in a 2D data set

      The zero crossing is marked in the cell to the left or below the zero
      crossing if the value itself is not zero.

      :param data: data to be analyzed
      :type data: 2D numpy float array

      :returns: **zeroes** -- All position numbers where there is a zero crossing in array "data".
                zeroes[0]: vector of row numbers, zeroes[1]: vector of column numbers
      :rtype: List of two 1D numpy int arrays



   .. py:method:: spector_line(data, d, n_coef, half_width)

      Calculate depth of random sources with formula of (Spector and Grant,
      Geophysics, 1970) for one line.
      Depths are calculated by fitting two lines to logarithmic spectrum. The
      break point between the two lines is searched between the 4th spectral
      coefficient and the one at position n_Ny-4.

      :param data: Data to be analyzed
      :type data: numpy 1D array, float
      :param d: distance between data points [m].
      :type d: float
      :param n_coef: Number of coefficients to be used for line fitting.
      :type n_coef: int
      :param half_width: Used for determination of local maxima: if the value of point # i
                         is larger than all values between i-helf_width a,d i+half_width, the
                         point i is considered a local maximum.
      :type half_width: int

      :returns: * *float* -- Depth calculated with slope of small wave numbers.
                * *float* -- Depth calculated with slope of large wave numbers.
                * *int* -- Number of spectral coefficient where the slope break is located.
                * *float* -- Intercept of first line (small wave numbers).
                * *float* -- Intercept of second line (large wave numbers).
                * *float* -- Misfit of data adjustment
                * *numpy 1D array, float* -- Logarithmic power spectral values.
                * *numpy 1D array, float* -- Wave numbers of power spectrum.



   .. py:method:: spector()

      Calculate depth of random sources with formula of (Spector and Grant,
      Geophysics, 1970) for all lines (N-S or E-W direction).
      Depths are calculated by fitting two lines to logarithmic spectrum. The
      break point between the two lines is searched between the 4th and the 10th
      spectral coefficient.
      Results of all lines are saved in file spector.dat.




   .. py:method:: spector2D()

      Calculate depth of random sources with formula of (Spector and Grant,
      Geophysics, 1970) in 2D.

      Choose first a window length. Spectral coefficients are averaged over
      radial equidistant coefficients. Depths are calculated by fitting two
      lines to logarithmic spectrum. The break point between the two lines is
      searched between the 4th and the 10th spectral coefficient.
      Results of all lines are saved in file spector.dat.

      The window length should be defined such that the number of Fourier
      coefficients is at least 8:
      (n = window_length/(2*max(dx,dy)), dx, dy, step sizes defined during
      interpolation)

      Results are stored in file spector2D_<data_type>.dat; Data type may be
      "magnetic" or "gravity".




   .. py:method:: gradient(data, dx, dy, filt=5.0)

      Calculate absolute gradient of a data set interpolated onto a regular grid.

      The grid step may be different in x and y directions.

      :param data: Data for which gradient should be calculated.
      :type data: 2D numpy float array
      :param dx: Grid step in x-direction.
      :type dx: float
      :param dy: Grid step in y-direction.
      :type dy: float
      :param filt: Size of gaussian filter applied to data before gradient calculation
                   in number of grid points (the maximum grid size from x and y
                   direction is the reference). If filt==0, no gaussian filter applied
      :type filt: float

      :returns: Absolute data gradient.
      :rtype: 2D numpy float array with the same size as data



   .. py:method:: tilt()

      Calculate tilt angle (Miller & Singh, JAG, 1994)

      :rtype: None.



   .. py:method:: continuation()

      Calculate field at higher or lower altitude (Nabighian, Geophysics, 1972)



   .. py:method:: analyticSignal()

      Calculate analytic signal (Nabighian, Geophysics, 1972)

      :rtype: None.



   .. py:method:: followLine(fig, ax, release_flag=False, nleft=1, nright=1)

      Pull line across plot
      :param fig:
      :type fig: names of figures and axis where to follow the line
      :param ax:
      :type ax: names of figures and axis where to follow the line
      :param release_flag (boolean):
      :type release_flag (boolean): If True, end of line when left button released                                 if False, end of line triggered by pressing right button
      :param nleft (int):
      :type nleft (int): if 0 start line for negative direction at origin                      if not, start line at the position of first click
      :param nright (int):
      :type nright (int): if 0 start line for positive direction at origin                      if not, start line at the position of first click

      :returns: * *event.button*
                * *Mouse button pressed to exit sunction (may be 2 for wheel ar 3*
                * *for right button)*
                * *Left button adds new point. right button finishes. Wheel erases last*
                * *clicked point or, if no points is available, returns*



   .. py:method:: eventFilter(obj, event)

      Function interprets keyboard events. It reacts only on key release !
      TODO

      :param obj: The object that contains the window where the cursor should be so
                  the keystroke is captured, i.e. Main.window
      :type obj: TYPE Object
      :param event: Any QT event, although only key-release events are treated.
      :type event: Qt event

      :rtype: None.



   .. py:method:: Handler(signal_received, frame)

      Handles CTRL-C key stroke

      :param signal_received:
      :type signal_received: CTRL-C keystroke
      :param frame:
      :type frame: No idea

      :rtype: None.



   .. py:method:: save_lineaments()

      If lineaments were picked, save the information into file lineaments.dat

      The file has the format:
      #key (including the character #)
      x y

      Actually, key may be "magnetic tilt" or "gravity tilt", meaning
      lineaments having been traced on tilt angle maps of gravity or
      megnetic data.

      x y line is repeated for every point defining a lineament.
      File is finished with "#END"

      :rtype: None.



   .. py:method:: close_app()

      Finishes application:

      Stores picks into file pick.dat
      Stores information concerning possibly modified traces (muted or sign-inversed)
      Deletes unneeded folder if tomography was calculated
      Closes window



